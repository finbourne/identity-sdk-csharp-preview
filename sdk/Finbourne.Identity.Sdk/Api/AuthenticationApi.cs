/*
 * FINBOURNE Identity Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2800
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Identity.Sdk.Client;
using Finbourne.Identity.Sdk.Model;

namespace Finbourne.Identity.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GetAuthenticationInformation: Gets AuthenticationInformation
        /// </summary>
        /// <remarks>
        /// Get the AuthenticationInformation associated with the current domain. This includes all the  necessary information to login to this domain.
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationInformation</returns>
        AuthenticationInformation GetAuthenticationInformation();

        /// <summary>
        /// GetAuthenticationInformation: Gets AuthenticationInformation
        /// </summary>
        /// <remarks>
        /// Get the AuthenticationInformation associated with the current domain. This includes all the  necessary information to login to this domain.
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationInformation</returns>
        ApiResponse<AuthenticationInformation> GetAuthenticationInformationWithHttpInfo();
        /// <summary>
        /// [EXPERIMENTAL] GetPasswordPolicy: Gets password policy for a user type
        /// </summary>
        /// <remarks>
        /// Get the password policy for a given user type
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <returns>PasswordPolicyResponse</returns>
        PasswordPolicyResponse GetPasswordPolicy(string userType);

        /// <summary>
        /// [EXPERIMENTAL] GetPasswordPolicy: Gets password policy for a user type
        /// </summary>
        /// <remarks>
        /// Get the password policy for a given user type
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <returns>ApiResponse of PasswordPolicyResponse</returns>
        ApiResponse<PasswordPolicyResponse> GetPasswordPolicyWithHttpInfo(string userType);
        /// <summary>
        /// [EARLY ACCESS] GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination
        /// </summary>
        /// <remarks>
        /// The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination  including obfuscated userIds of those who created and terminated the request
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start expiry date to query support access requests from (optional)</param>
        /// <param name="end">The end expiry date to query support access requests to (optional)</param>
        /// <returns>ICollection&lt;SupportAccessResponse&gt;</returns>
        ICollection<SupportAccessResponse> GetSupportAccessHistory(DateTimeOffset? start = default(DateTimeOffset?), DateTimeOffset? end = default(DateTimeOffset?));

        /// <summary>
        /// [EARLY ACCESS] GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination
        /// </summary>
        /// <remarks>
        /// The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination  including obfuscated userIds of those who created and terminated the request
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start expiry date to query support access requests from (optional)</param>
        /// <param name="end">The end expiry date to query support access requests to (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;SupportAccessResponse&gt;</returns>
        ApiResponse<ICollection<SupportAccessResponse>> GetSupportAccessHistoryWithHttpInfo(DateTimeOffset? start = default(DateTimeOffset?), DateTimeOffset? end = default(DateTimeOffset?));
        /// <summary>
        /// [EARLY ACCESS] GetSupportRoles: Get mapping of support roles, the internal representation to a human friendly representation
        /// </summary>
        /// <remarks>
        /// Get mapping of support roles, the internal representation to a human friendly representation
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SupportRolesResponse</returns>
        SupportRolesResponse GetSupportRoles();

        /// <summary>
        /// [EARLY ACCESS] GetSupportRoles: Get mapping of support roles, the internal representation to a human friendly representation
        /// </summary>
        /// <remarks>
        /// Get mapping of support roles, the internal representation to a human friendly representation
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SupportRolesResponse</returns>
        ApiResponse<SupportRolesResponse> GetSupportRolesWithHttpInfo();
        /// <summary>
        /// [EARLY ACCESS] GrantSupportAccess: Grants FINBOURNE support access to your account
        /// </summary>
        /// <remarks>
        /// Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues  You can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportAccessRequest">Request detailing the duration and reasons for supplying support access</param>
        /// <returns>SupportAccessResponse</returns>
        SupportAccessResponse GrantSupportAccess(SupportAccessRequest supportAccessRequest);

        /// <summary>
        /// [EARLY ACCESS] GrantSupportAccess: Grants FINBOURNE support access to your account
        /// </summary>
        /// <remarks>
        /// Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues  You can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportAccessRequest">Request detailing the duration and reasons for supplying support access</param>
        /// <returns>ApiResponse of SupportAccessResponse</returns>
        ApiResponse<SupportAccessResponse> GrantSupportAccessWithHttpInfo(SupportAccessRequest supportAccessRequest);
        /// <summary>
        /// [EARLY ACCESS] InvalidateSupportAccess: Revoke any FINBOURNE support access to your account
        /// </summary>
        /// <remarks>
        /// This will result in a loss of access to your data for all FINBOURNE support agents
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;SupportAccessResponse&gt;</returns>
        ICollection<SupportAccessResponse> InvalidateSupportAccess();

        /// <summary>
        /// [EARLY ACCESS] InvalidateSupportAccess: Revoke any FINBOURNE support access to your account
        /// </summary>
        /// <remarks>
        /// This will result in a loss of access to your data for all FINBOURNE support agents
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;SupportAccessResponse&gt;</returns>
        ApiResponse<ICollection<SupportAccessResponse>> InvalidateSupportAccessWithHttpInfo();
        /// <summary>
        /// [EXPERIMENTAL] UpdatePasswordPolicy: Updates password policy for a user type
        /// </summary>
        /// <remarks>
        /// Update the password policy for a given user type
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="updatePasswordPolicyRequest">The password policy for the given user type (optional)</param>
        /// <returns>PasswordPolicyResponse</returns>
        PasswordPolicyResponse UpdatePasswordPolicy(string userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest = default(UpdatePasswordPolicyRequest));

        /// <summary>
        /// [EXPERIMENTAL] UpdatePasswordPolicy: Updates password policy for a user type
        /// </summary>
        /// <remarks>
        /// Update the password policy for a given user type
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="updatePasswordPolicyRequest">The password policy for the given user type (optional)</param>
        /// <returns>ApiResponse of PasswordPolicyResponse</returns>
        ApiResponse<PasswordPolicyResponse> UpdatePasswordPolicyWithHttpInfo(string userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest = default(UpdatePasswordPolicyRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GetAuthenticationInformation: Gets AuthenticationInformation
        /// </summary>
        /// <remarks>
        /// Get the AuthenticationInformation associated with the current domain. This includes all the  necessary information to login to this domain.
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationInformation</returns>
        System.Threading.Tasks.Task<AuthenticationInformation> GetAuthenticationInformationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetAuthenticationInformation: Gets AuthenticationInformation
        /// </summary>
        /// <remarks>
        /// Get the AuthenticationInformation associated with the current domain. This includes all the  necessary information to login to this domain.
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationInformation>> GetAuthenticationInformationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetPasswordPolicy: Gets password policy for a user type
        /// </summary>
        /// <remarks>
        /// Get the password policy for a given user type
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PasswordPolicyResponse</returns>
        System.Threading.Tasks.Task<PasswordPolicyResponse> GetPasswordPolicyAsync(string userType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetPasswordPolicy: Gets password policy for a user type
        /// </summary>
        /// <remarks>
        /// Get the password policy for a given user type
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PasswordPolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PasswordPolicyResponse>> GetPasswordPolicyWithHttpInfoAsync(string userType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination
        /// </summary>
        /// <remarks>
        /// The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination  including obfuscated userIds of those who created and terminated the request
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start expiry date to query support access requests from (optional)</param>
        /// <param name="end">The end expiry date to query support access requests to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ICollection&lt;SupportAccessResponse&gt;</returns>
        System.Threading.Tasks.Task<ICollection<SupportAccessResponse>> GetSupportAccessHistoryAsync(DateTimeOffset? start = default(DateTimeOffset?), DateTimeOffset? end = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination
        /// </summary>
        /// <remarks>
        /// The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination  including obfuscated userIds of those who created and terminated the request
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start expiry date to query support access requests from (optional)</param>
        /// <param name="end">The end expiry date to query support access requests to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ICollection&lt;SupportAccessResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<SupportAccessResponse>>> GetSupportAccessHistoryWithHttpInfoAsync(DateTimeOffset? start = default(DateTimeOffset?), DateTimeOffset? end = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GetSupportRoles: Get mapping of support roles, the internal representation to a human friendly representation
        /// </summary>
        /// <remarks>
        /// Get mapping of support roles, the internal representation to a human friendly representation
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportRolesResponse</returns>
        System.Threading.Tasks.Task<SupportRolesResponse> GetSupportRolesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GetSupportRoles: Get mapping of support roles, the internal representation to a human friendly representation
        /// </summary>
        /// <remarks>
        /// Get mapping of support roles, the internal representation to a human friendly representation
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportRolesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupportRolesResponse>> GetSupportRolesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] GrantSupportAccess: Grants FINBOURNE support access to your account
        /// </summary>
        /// <remarks>
        /// Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues  You can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportAccessRequest">Request detailing the duration and reasons for supplying support access</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportAccessResponse</returns>
        System.Threading.Tasks.Task<SupportAccessResponse> GrantSupportAccessAsync(SupportAccessRequest supportAccessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] GrantSupportAccess: Grants FINBOURNE support access to your account
        /// </summary>
        /// <remarks>
        /// Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues  You can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportAccessRequest">Request detailing the duration and reasons for supplying support access</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportAccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupportAccessResponse>> GrantSupportAccessWithHttpInfoAsync(SupportAccessRequest supportAccessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EARLY ACCESS] InvalidateSupportAccess: Revoke any FINBOURNE support access to your account
        /// </summary>
        /// <remarks>
        /// This will result in a loss of access to your data for all FINBOURNE support agents
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ICollection&lt;SupportAccessResponse&gt;</returns>
        System.Threading.Tasks.Task<ICollection<SupportAccessResponse>> InvalidateSupportAccessAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EARLY ACCESS] InvalidateSupportAccess: Revoke any FINBOURNE support access to your account
        /// </summary>
        /// <remarks>
        /// This will result in a loss of access to your data for all FINBOURNE support agents
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ICollection&lt;SupportAccessResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<SupportAccessResponse>>> InvalidateSupportAccessWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdatePasswordPolicy: Updates password policy for a user type
        /// </summary>
        /// <remarks>
        /// Update the password policy for a given user type
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="updatePasswordPolicyRequest">The password policy for the given user type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PasswordPolicyResponse</returns>
        System.Threading.Tasks.Task<PasswordPolicyResponse> UpdatePasswordPolicyAsync(string userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest = default(UpdatePasswordPolicyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdatePasswordPolicy: Updates password policy for a user type
        /// </summary>
        /// <remarks>
        /// Update the password policy for a given user type
        /// </remarks>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="updatePasswordPolicyRequest">The password policy for the given user type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PasswordPolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PasswordPolicyResponse>> UpdatePasswordPolicyWithHttpInfoAsync(string userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest = default(UpdatePasswordPolicyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IAuthenticationApiSync, IAuthenticationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private Finbourne.Identity.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = Finbourne.Identity.Sdk.Client.Configuration.MergeConfigurations(
                Finbourne.Identity.Sdk.Client.GlobalConfiguration.Instance,
                new Finbourne.Identity.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Finbourne.Identity.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Identity.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Identity.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Finbourne.Identity.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Identity.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Identity.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Identity.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthenticationApi(Finbourne.Identity.Sdk.Client.ISynchronousClient client, Finbourne.Identity.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Identity.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Identity.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Identity.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Identity.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Identity.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Identity.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GetAuthenticationInformation: Gets AuthenticationInformation Get the AuthenticationInformation associated with the current domain. This includes all the  necessary information to login to this domain.
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthenticationInformation</returns>
        public AuthenticationInformation GetAuthenticationInformation()
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<AuthenticationInformation> localVarResponse = GetAuthenticationInformationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetAuthenticationInformation: Gets AuthenticationInformation Get the AuthenticationInformation associated with the current domain. This includes all the  necessary information to login to this domain.
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthenticationInformation</returns>
        public Finbourne.Identity.Sdk.Client.ApiResponse<AuthenticationInformation> GetAuthenticationInformationWithHttpInfo()
        {
            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthenticationInformation>("/api/authentication/information", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthenticationInformation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetAuthenticationInformation: Gets AuthenticationInformation Get the AuthenticationInformation associated with the current domain. This includes all the  necessary information to login to this domain.
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationInformation</returns>
        public async System.Threading.Tasks.Task<AuthenticationInformation> GetAuthenticationInformationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<AuthenticationInformation> localVarResponse = await GetAuthenticationInformationWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetAuthenticationInformation: Gets AuthenticationInformation Get the AuthenticationInformation associated with the current domain. This includes all the  necessary information to login to this domain.
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationInformation)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Identity.Sdk.Client.ApiResponse<AuthenticationInformation>> GetAuthenticationInformationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticationInformation>("/api/authentication/information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthenticationInformation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetPasswordPolicy: Gets password policy for a user type Get the password policy for a given user type
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <returns>PasswordPolicyResponse</returns>
        public PasswordPolicyResponse GetPasswordPolicy(string userType)
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<PasswordPolicyResponse> localVarResponse = GetPasswordPolicyWithHttpInfo(userType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetPasswordPolicy: Gets password policy for a user type Get the password policy for a given user type
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <returns>ApiResponse of PasswordPolicyResponse</returns>
        public Finbourne.Identity.Sdk.Client.ApiResponse<PasswordPolicyResponse> GetPasswordPolicyWithHttpInfo(string userType)
        {
            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Finbourne.Identity.Sdk.Client.ApiException(400, "Missing required parameter 'userType' when calling AuthenticationApi->GetPasswordPolicy");

            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userType", Finbourne.Identity.Sdk.Client.ClientUtils.ParameterToString(userType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request
            var localVarResponse = this.Client.Get<PasswordPolicyResponse>("/api/authentication/password-policy/{userType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPasswordPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetPasswordPolicy: Gets password policy for a user type Get the password policy for a given user type
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PasswordPolicyResponse</returns>
        public async System.Threading.Tasks.Task<PasswordPolicyResponse> GetPasswordPolicyAsync(string userType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<PasswordPolicyResponse> localVarResponse = await GetPasswordPolicyWithHttpInfoAsync(userType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetPasswordPolicy: Gets password policy for a user type Get the password policy for a given user type
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PasswordPolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Identity.Sdk.Client.ApiResponse<PasswordPolicyResponse>> GetPasswordPolicyWithHttpInfoAsync(string userType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Finbourne.Identity.Sdk.Client.ApiException(400, "Missing required parameter 'userType' when calling AuthenticationApi->GetPasswordPolicy");


            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userType", Finbourne.Identity.Sdk.Client.ClientUtils.ParameterToString(userType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PasswordPolicyResponse>("/api/authentication/password-policy/{userType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPasswordPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination  including obfuscated userIds of those who created and terminated the request
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start expiry date to query support access requests from (optional)</param>
        /// <param name="end">The end expiry date to query support access requests to (optional)</param>
        /// <returns>ICollection&lt;SupportAccessResponse&gt;</returns>
        public ICollection<SupportAccessResponse> GetSupportAccessHistory(DateTimeOffset? start = default(DateTimeOffset?), DateTimeOffset? end = default(DateTimeOffset?))
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<ICollection<SupportAccessResponse>> localVarResponse = GetSupportAccessHistoryWithHttpInfo(start, end);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination  including obfuscated userIds of those who created and terminated the request
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start expiry date to query support access requests from (optional)</param>
        /// <param name="end">The end expiry date to query support access requests to (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;SupportAccessResponse&gt;</returns>
        public Finbourne.Identity.Sdk.Client.ApiResponse<ICollection<SupportAccessResponse>> GetSupportAccessHistoryWithHttpInfo(DateTimeOffset? start = default(DateTimeOffset?), DateTimeOffset? end = default(DateTimeOffset?))
        {
            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Identity.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Identity.Sdk.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ICollection<SupportAccessResponse>>("/api/authentication/support", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSupportAccessHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination  including obfuscated userIds of those who created and terminated the request
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start expiry date to query support access requests from (optional)</param>
        /// <param name="end">The end expiry date to query support access requests to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ICollection&lt;SupportAccessResponse&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<SupportAccessResponse>> GetSupportAccessHistoryAsync(DateTimeOffset? start = default(DateTimeOffset?), DateTimeOffset? end = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<ICollection<SupportAccessResponse>> localVarResponse = await GetSupportAccessHistoryWithHttpInfoAsync(start, end, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSupportAccessHistory: Get the history of all support access granted and any information pertaining to their termination The active and inactive support requests will be returned, inactive support requests will have information pertaining to their termination  including obfuscated userIds of those who created and terminated the request
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">The start expiry date to query support access requests from (optional)</param>
        /// <param name="end">The end expiry date to query support access requests to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ICollection&lt;SupportAccessResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Identity.Sdk.Client.ApiResponse<ICollection<SupportAccessResponse>>> GetSupportAccessHistoryWithHttpInfoAsync(DateTimeOffset? start = default(DateTimeOffset?), DateTimeOffset? end = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Identity.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Identity.Sdk.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ICollection<SupportAccessResponse>>("/api/authentication/support", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSupportAccessHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSupportRoles: Get mapping of support roles, the internal representation to a human friendly representation Get mapping of support roles, the internal representation to a human friendly representation
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SupportRolesResponse</returns>
        public SupportRolesResponse GetSupportRoles()
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<SupportRolesResponse> localVarResponse = GetSupportRolesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSupportRoles: Get mapping of support roles, the internal representation to a human friendly representation Get mapping of support roles, the internal representation to a human friendly representation
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SupportRolesResponse</returns>
        public Finbourne.Identity.Sdk.Client.ApiResponse<SupportRolesResponse> GetSupportRolesWithHttpInfo()
        {
            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request
            var localVarResponse = this.Client.Get<SupportRolesResponse>("/api/authentication/support-roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSupportRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSupportRoles: Get mapping of support roles, the internal representation to a human friendly representation Get mapping of support roles, the internal representation to a human friendly representation
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportRolesResponse</returns>
        public async System.Threading.Tasks.Task<SupportRolesResponse> GetSupportRolesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<SupportRolesResponse> localVarResponse = await GetSupportRolesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GetSupportRoles: Get mapping of support roles, the internal representation to a human friendly representation Get mapping of support roles, the internal representation to a human friendly representation
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportRolesResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Identity.Sdk.Client.ApiResponse<SupportRolesResponse>> GetSupportRolesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SupportRolesResponse>("/api/authentication/support-roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSupportRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GrantSupportAccess: Grants FINBOURNE support access to your account Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues  You can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportAccessRequest">Request detailing the duration and reasons for supplying support access</param>
        /// <returns>SupportAccessResponse</returns>
        public SupportAccessResponse GrantSupportAccess(SupportAccessRequest supportAccessRequest)
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<SupportAccessResponse> localVarResponse = GrantSupportAccessWithHttpInfo(supportAccessRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GrantSupportAccess: Grants FINBOURNE support access to your account Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues  You can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportAccessRequest">Request detailing the duration and reasons for supplying support access</param>
        /// <returns>ApiResponse of SupportAccessResponse</returns>
        public Finbourne.Identity.Sdk.Client.ApiResponse<SupportAccessResponse> GrantSupportAccessWithHttpInfo(SupportAccessRequest supportAccessRequest)
        {
            // verify the required parameter 'supportAccessRequest' is set
            if (supportAccessRequest == null)
                throw new Finbourne.Identity.Sdk.Client.ApiException(400, "Missing required parameter 'supportAccessRequest' when calling AuthenticationApi->GrantSupportAccess");

            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = supportAccessRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request
            var localVarResponse = this.Client.Post<SupportAccessResponse>("/api/authentication/support", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantSupportAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] GrantSupportAccess: Grants FINBOURNE support access to your account Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues  You can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportAccessRequest">Request detailing the duration and reasons for supplying support access</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SupportAccessResponse</returns>
        public async System.Threading.Tasks.Task<SupportAccessResponse> GrantSupportAccessAsync(SupportAccessRequest supportAccessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<SupportAccessResponse> localVarResponse = await GrantSupportAccessWithHttpInfoAsync(supportAccessRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] GrantSupportAccess: Grants FINBOURNE support access to your account Granting support access will allow FINBOURNE employees full access to your data with the express intent to investigate support issues  You can revoke this (and all) access at any time using the InvalidateSupportAccess endpoint.
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supportAccessRequest">Request detailing the duration and reasons for supplying support access</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SupportAccessResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Identity.Sdk.Client.ApiResponse<SupportAccessResponse>> GrantSupportAccessWithHttpInfoAsync(SupportAccessRequest supportAccessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'supportAccessRequest' is set
            if (supportAccessRequest == null)
                throw new Finbourne.Identity.Sdk.Client.ApiException(400, "Missing required parameter 'supportAccessRequest' when calling AuthenticationApi->GrantSupportAccess");


            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = supportAccessRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SupportAccessResponse>("/api/authentication/support", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantSupportAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] InvalidateSupportAccess: Revoke any FINBOURNE support access to your account This will result in a loss of access to your data for all FINBOURNE support agents
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;SupportAccessResponse&gt;</returns>
        public ICollection<SupportAccessResponse> InvalidateSupportAccess()
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<ICollection<SupportAccessResponse>> localVarResponse = InvalidateSupportAccessWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] InvalidateSupportAccess: Revoke any FINBOURNE support access to your account This will result in a loss of access to your data for all FINBOURNE support agents
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;SupportAccessResponse&gt;</returns>
        public Finbourne.Identity.Sdk.Client.ApiResponse<ICollection<SupportAccessResponse>> InvalidateSupportAccessWithHttpInfo()
        {
            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ICollection<SupportAccessResponse>>("/api/authentication/support", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvalidateSupportAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EARLY ACCESS] InvalidateSupportAccess: Revoke any FINBOURNE support access to your account This will result in a loss of access to your data for all FINBOURNE support agents
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ICollection&lt;SupportAccessResponse&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<SupportAccessResponse>> InvalidateSupportAccessAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<ICollection<SupportAccessResponse>> localVarResponse = await InvalidateSupportAccessWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] InvalidateSupportAccess: Revoke any FINBOURNE support access to your account This will result in a loss of access to your data for all FINBOURNE support agents
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ICollection&lt;SupportAccessResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Identity.Sdk.Client.ApiResponse<ICollection<SupportAccessResponse>>> InvalidateSupportAccessWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ICollection<SupportAccessResponse>>("/api/authentication/support", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvalidateSupportAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdatePasswordPolicy: Updates password policy for a user type Update the password policy for a given user type
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="updatePasswordPolicyRequest">The password policy for the given user type (optional)</param>
        /// <returns>PasswordPolicyResponse</returns>
        public PasswordPolicyResponse UpdatePasswordPolicy(string userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest = default(UpdatePasswordPolicyRequest))
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<PasswordPolicyResponse> localVarResponse = UpdatePasswordPolicyWithHttpInfo(userType, updatePasswordPolicyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdatePasswordPolicy: Updates password policy for a user type Update the password policy for a given user type
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="updatePasswordPolicyRequest">The password policy for the given user type (optional)</param>
        /// <returns>ApiResponse of PasswordPolicyResponse</returns>
        public Finbourne.Identity.Sdk.Client.ApiResponse<PasswordPolicyResponse> UpdatePasswordPolicyWithHttpInfo(string userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest = default(UpdatePasswordPolicyRequest))
        {
            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Finbourne.Identity.Sdk.Client.ApiException(400, "Missing required parameter 'userType' when calling AuthenticationApi->UpdatePasswordPolicy");

            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userType", Finbourne.Identity.Sdk.Client.ClientUtils.ParameterToString(userType)); // path parameter
            localVarRequestOptions.Data = updatePasswordPolicyRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request
            var localVarResponse = this.Client.Put<PasswordPolicyResponse>("/api/authentication/password-policy/{userType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePasswordPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdatePasswordPolicy: Updates password policy for a user type Update the password policy for a given user type
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="updatePasswordPolicyRequest">The password policy for the given user type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PasswordPolicyResponse</returns>
        public async System.Threading.Tasks.Task<PasswordPolicyResponse> UpdatePasswordPolicyAsync(string userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest = default(UpdatePasswordPolicyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Identity.Sdk.Client.ApiResponse<PasswordPolicyResponse> localVarResponse = await UpdatePasswordPolicyWithHttpInfoAsync(userType, updatePasswordPolicyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdatePasswordPolicy: Updates password policy for a user type Update the password policy for a given user type
        /// </summary>
        /// <exception cref="Finbourne.Identity.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userType">The type of user (should only be personal or service)</param>
        /// <param name="updatePasswordPolicyRequest">The password policy for the given user type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PasswordPolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Identity.Sdk.Client.ApiResponse<PasswordPolicyResponse>> UpdatePasswordPolicyWithHttpInfoAsync(string userType, UpdatePasswordPolicyRequest updatePasswordPolicyRequest = default(UpdatePasswordPolicyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userType' is set
            if (userType == null)
                throw new Finbourne.Identity.Sdk.Client.ApiException(400, "Missing required parameter 'userType' when calling AuthenticationApi->UpdatePasswordPolicy");


            Finbourne.Identity.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Identity.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Identity.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userType", Finbourne.Identity.Sdk.Client.ClientUtils.ParameterToString(userType)); // path parameter
            localVarRequestOptions.Data = updatePasswordPolicyRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.2800");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PasswordPolicyResponse>("/api/authentication/password-policy/{userType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePasswordPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}